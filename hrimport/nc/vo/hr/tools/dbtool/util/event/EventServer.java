/* Generated by Together */

package nc.vo.hr.tools.dbtool.util.event;

import java.util.EventListener;
import java.util.EventObject;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.swing.event.EventListenerList;

/**
 * enent server
 * @author 闫长海 
 */
public class EventServer implements IEventServer {

    private IEventServerConfig config = null;
    private String name = null;
    
    private Map eventListenerMap = null;
    private Map eventDispatcherMap = null;
    private EventListenerList listenerList = null;
    
    /**
     * 
     */
    public EventServer() {
        super();        
    }
    
    public EventServer(String name) {
        super();
        this.name = name;        
    }
    
    public EventServer(String name, IEventServerConfig config ) {
        super();
        this.name = name;
        this.config  = config ;        
    }
    
    /* (non-Javadoc)
     * @see nc.ui.print.util.event.IEventServer#registerEvent(java.lang.Class, java.lang.Class, java.lang.Class)
     */
    public void registerEvent(Class eventClazz, Class listenerClazz, IEventDispatcher dispatcher ) {
        if( eventClazz==null || listenerClazz==null || dispatcher==null ) {
            return;
        }
        getEventListenerMap().put( eventClazz, listenerClazz);
        getEventDispatcherMap().put( eventClazz, dispatcher );        
        
       // 检查重复注册问题
       
    }
    
    /* (non-Javadoc)
     * @see nc.ui.print.util.event.IEventServer#registerEvent(java.lang.Class, java.lang.Class)
     */
    public void registerEvent(Class eventClazz, Class listenerClazz) {
        registerEvent( eventClazz, listenerClazz, new BaseEventDispatcher()  );
    }

    /* (non-Javadoc)
     * @see nc.ui.print.util.event.IEventServer#addEventListener(java.lang.Class, java.util.EventListener)
     */
    public void addEventListener(Class listenerClazz, EventListener listener) {
        if( listenerClazz==null || listener==null ) {
            return;
        }
        getListenerList().add( listenerClazz, listener );
    }
    
    /* (non-Javadoc)
     * @see nc.ui.print.util.event.IEventServer#addEventListener(java.util.EventListener)
     */
    public void addEventListener( EventListener listener) {
        if( listener==null ) {
            return;
        }
        // 得到监听器类型
        Iterator it = getEventListenerMap().values().iterator();
        while( it.hasNext() ) {
            Class listenerClazz = (Class) it.next();
            if(  isObjInstanceofClass( listener, listenerClazz ) ) {
                // 加入缓冲
                getListenerList().add( listenerClazz, listener );
            }
        }        
    }

    /**
     * @param listener
     * @param listenerClazz
     * @return
     */
    private boolean isObjInstanceofClass(Object obj, Class clazz) {
        if( obj==null || clazz==null ) {
            return false;
        }
        
        if( obj.getClass().equals( clazz )) {
            return true;
        }
        
        Class[] objClazzs = obj.getClass().getInterfaces();
        if( objClazzs!=null ) {
            for (int i = 0; i < objClazzs.length; i++) {
                if( clazz.equals(objClazzs[i]) ) {
                    return true;
                }
            }
        }
        objClazzs = obj.getClass().getClasses();
        if( objClazzs!=null ) {
            for (int i = 0; i < objClazzs.length; i++) {
                if( clazz.equals(objClazzs[i]) ) {
                    return true;
                }
            }
        }
        return false;
    }

    /* 
     * 异常处理，如果有异常会导致其它监听不能执行
     * @see nc.ui.print.util.event.IEventServer#sendEvent(java.util.EventObject)
     */
    public void sendEvent(EventObject event)throws Exception {
        if( event==null ) {
            return;
        }

        // 得到监听器类型
        Iterator it = getEventListenerMap().keySet().iterator();
        while( it.hasNext() ) {
            Class eventClazz = (Class) it.next();
            // get event listener classs
            Class listenerClazz = (Class) getEventListenerMap().get( eventClazz );
            if( listenerClazz ==null ) {
                continue;
            } 
            if(  isObjInstanceofClass( event, eventClazz ) ) {             
                IEventDispatcher dispatcher = getDispatcherInstance( eventClazz );
                EventListener[] listeners = getListenerList().getListeners( listenerClazz );
                dispatchEvent( event, listeners, dispatcher );                
            }
        }           
    }
    
    /**
     * @param event
     * @param listeners
     * @param dispatcher
     */
    private void dispatchEvent(EventObject event, EventListener[] listeners, IEventDispatcher dispatcher) throws Exception {
        if( event==null || dispatcher==null || listeners==null ) {
            return;
        }
        // dispatcher
        for (int i = 0; i < listeners.length; i++) {
            dispatcher.dispatchEvent( event, listeners[i]);
        }
    }

    /**
     * @param eventClazz
     * @return
     */
    private IEventDispatcher getDispatcherInstance(Class eventClazz) {
        if( eventClazz==null) {
            return null;
        }
        
        IEventDispatcher dispatcher = (IEventDispatcher) getEventDispatcherMap().get( eventClazz );
               
        return dispatcher;
    }

    /**
     * @return Returns the config.
     */
    public IEventServerConfig getConfig() {
        if( config==null ) {
            config  = new EventServerConfig();
        }
        return config;
    }
    
    /**
     * @param config The config to set.
     */
    public void setConfig(IEventServerConfig config) {
        this.config = config;
    }
    /**
     * @return Returns the name.
     */
    public String getName() {
        if( name==null ) {
            name =  "defaultEventServer";
        }
        return name;
    }
    /**
     * @param name The name to set.
     */
    public void setName(String name) {
        this.name = name;
    }
    /**
     * @return Returns the eventDispatcherMap.
     */
    public Map getEventDispatcherMap() {
        if( eventDispatcherMap==null ) {
            eventDispatcherMap = new HashMap();
        }
        return eventDispatcherMap;
    }
    /**
     * @return Returns the eventListenerMap.
     */
    public Map getEventListenerMap() {
        if( eventListenerMap==null ) {
            eventListenerMap = new HashMap();
        }
        return eventListenerMap;
    }
    /**
     * @return Returns the listenerList.
     */
    public EventListenerList getListenerList() {
        if( listenerList == null ) {
            listenerList = new EventListenerList();
        }
        return listenerList;
    }

    /* (non-Javadoc)
     * @see nc.ui.print.util.event.IEventServer#removeEventListener(java.lang.Class, java.util.EventListener)
     */
    public void removeEventListener(Class listenerClazz, EventListener listener) {
        if( listenerClazz==null || listener==null ) {
            return;
        }
        getListenerList().remove( listenerClazz, listener );
    }

    /* (non-Javadoc)
     * @see nc.ui.print.util.event.IEventServer#removeEventListener(java.util.EventListener)
     */
    public void removeEventListener(EventListener listener) {
        if( listener==null ) {
            return;
        }
        // 得到监听器类型
        Iterator it = getEventListenerMap().values().iterator();
        while( it.hasNext() ) {
            Class listenerClazz = (Class) it.next();
            if(  isObjInstanceofClass( listener, listenerClazz ) ) {
                removeEventListener( listenerClazz, listener );
            }
        }   
    }    
}
