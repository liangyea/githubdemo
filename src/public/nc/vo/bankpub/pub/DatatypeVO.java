/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.bankpub.pub;

import java.util.ArrayList;

import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.FieldObject;
import nc.vo.pub.IntegerField;
import nc.vo.pub.NullFieldException;
import nc.vo.pub.StringField;
import nc.vo.pub.UFBooleanField;
import nc.vo.pub.UFDateField;
import nc.vo.pub.UFDateTimeField;
import nc.vo.pub.ValidationException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;

/**
 * 此处插入类型说明。
 * 
 * 创建日期：(2004-3-23)
 * @author：
 */
public class DatatypeVO extends CircularlyAccessibleValueObject {

	public String m_pk_datatype;
	public String m_typecode;
	public String m_typename;
	public Integer m_exchangedatacode;
	public String m_filepath;
	public String m_filename;
	public Integer m_partitionrec;
	public Integer m_partitionfield;
	public Integer m_importinterval;
	public UFDate m_importdate;
	public String m_importtime;
	public Integer m_importmode;
	public Integer m_flowdistance;
	public String m_tablename;
	public String m_ftpip;
	public Integer m_ftpport;
	public String m_ftpid;
	public String m_ftppwd;
	public String m_ftpstyle;
	public UFBoolean m_isnecessary;
	public UFDateTime m_ts;
	public Integer m_dr;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_datatypeField;
	private static StringField m_typecodeField;
	private static StringField m_typenameField;
	private static IntegerField m_exchangedatacodeField;
	private static StringField m_filepathField;
	private static StringField m_filenameField;
	private static IntegerField m_partitionrecField;
	private static IntegerField m_partitionfieldField;
	private static IntegerField m_importintervalField;
	private static UFDateField m_importdateField;
	private static StringField m_importtimeField;
	private static IntegerField m_importmodeField;
	private static IntegerField m_flowdistanceField;
	private static StringField m_tablenameField;
	private static StringField m_ftpipField;
	private static IntegerField m_ftpportField;
	private static StringField m_ftpidField;
	private static StringField m_ftppwdField;
	private static StringField m_ftpstyleField;
	private static UFBooleanField m_isnecessaryField;
	private static UFDateTimeField m_tsField;
	private static IntegerField m_drField;
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2004-3-23)
 */
public DatatypeVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2004-3-23)
 * @param ??fieldNameForMethod?? 主键值
 */
public DatatypeVO(String newPk_datatype) {

	// 为主键字段赋值:
	m_pk_datatype = newPk_datatype;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2004-3-23)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	DatatypeVO datatype = (DatatypeVO)o;

	// 你在下面复制本VO对象的所有属性：

	return datatype;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2004-3-23)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Datatype";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_datatype;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2004-3-23)
 * @param m_pk_datatype String 
 */
public void setPrimaryKey(String newPk_datatype) {

	m_pk_datatype = newPk_datatype;
}
/**
 * 属性m_pk_datatype的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getPk_datatype() {
	return m_pk_datatype;
}
/**
 * 属性m_typecode的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getTypecode() {
	return m_typecode;
}
/**
 * 属性m_typename的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getTypename() {
	return m_typename;
}
/**
 * 属性m_exchangedatacode的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getExchangedatacode() {
	return m_exchangedatacode;
}
/**
 * 属性m_filepath的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getFilepath() {
	return m_filepath;
}
/**
 * 属性m_filename的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getFilename() {
	return m_filename;
}
/**
 * 属性m_partitionrec的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getPartitionrec() {
	return m_partitionrec;
}
/**
 * 属性m_partitionfield的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getPartitionfield() {
	return m_partitionfield;
}
/**
 * 属性m_importinterval的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getImportinterval() {
	return m_importinterval;
}
/**
 * 属性m_importdate的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return UFDate
 */
public UFDate getImportdate() {
	return m_importdate;
}
/**
 * 属性m_importtime的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getImporttime() {
	return m_importtime;
}
/**
 * 属性m_importmode的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getImportmode() {
	return m_importmode;
}
/**
 * 属性m_flowdistance的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getFlowdistance() {
	return m_flowdistance;
}
/**
 * 属性m_tablename的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getTablename() {
	return m_tablename;
}
/**
 * 属性m_ftpip的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getFtpip() {
	return m_ftpip;
}
/**
 * 属性m_ftpport的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getFtpport() {
	return m_ftpport;
}
/**
 * 属性m_ftpid的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getFtpid() {
	return m_ftpid;
}
/**
 * 属性m_ftppwd的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getFtppwd() {
	return m_ftppwd;
}
/**
 * 属性m_ftpstyle的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return String
 */
public String getFtpstyle() {
	return m_ftpstyle;
}
/**
 * 属性m_isnecessary的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return UFBoolean
 */
public UFBoolean getIsnecessary() {
	return m_isnecessary;
}
/**
 * 属性m_ts的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return UFDateTime
 */
public UFDateTime getTs() {
	return m_ts;
}
/**
 * 属性m_dr的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return Integer
 */
public Integer getDr() {
	return m_dr;
}
/**
 * 属性m_pk_datatype的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_pk_datatype String
 */
public void setPk_datatype(String newPk_datatype) {

	m_pk_datatype = newPk_datatype;
}
/**
 * 属性m_typecode的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_typecode String
 */
public void setTypecode(String newTypecode) {

	m_typecode = newTypecode;
}
/**
 * 属性m_typename的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_typename String
 */
public void setTypename(String newTypename) {

	m_typename = newTypename;
}
/**
 * 属性m_exchangedatacode的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_exchangedatacode Integer
 */
public void setExchangedatacode(Integer newExchangedatacode) {

	m_exchangedatacode = newExchangedatacode;
}
/**
 * 属性m_filepath的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_filepath String
 */
public void setFilepath(String newFilepath) {

	m_filepath = newFilepath;
}
/**
 * 属性m_filename的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_filename String
 */
public void setFilename(String newFilename) {

	m_filename = newFilename;
}
/**
 * 属性m_partitionrec的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_partitionrec Integer
 */
public void setPartitionrec(Integer newPartitionrec) {

	m_partitionrec = newPartitionrec;
}
/**
 * 属性m_partitionfield的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_partitionfield Integer
 */
public void setPartitionfield(Integer newPartitionfield) {

	m_partitionfield = newPartitionfield;
}
/**
 * 属性m_importinterval的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_importinterval Integer
 */
public void setImportinterval(Integer newImportinterval) {

	m_importinterval = newImportinterval;
}
/**
 * 属性m_importdate的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_importdate UFDate
 */
public void setImportdate(UFDate newImportdate) {

	m_importdate = newImportdate;
}
/**
 * 属性m_importtime的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_importtime String
 */
public void setImporttime(String newImporttime) {

	m_importtime = newImporttime;
}
/**
 * 属性m_importmode的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_importmode Integer
 */
public void setImportmode(Integer newImportmode) {

	m_importmode = newImportmode;
}
/**
 * 属性m_flowdistance的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_flowdistance Integer
 */
public void setFlowdistance(Integer newFlowdistance) {

	m_flowdistance = newFlowdistance;
}
/**
 * 属性m_tablename的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_tablename String
 */
public void setTablename(String newTablename) {

	m_tablename = newTablename;
}
/**
 * 属性m_ftpip的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_ftpip String
 */
public void setFtpip(String newFtpip) {

	m_ftpip = newFtpip;
}
/**
 * 属性m_ftpport的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_ftpport Integer
 */
public void setFtpport(Integer newFtpport) {

	m_ftpport = newFtpport;
}
/**
 * 属性m_ftpid的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_ftpid String
 */
public void setFtpid(String newFtpid) {

	m_ftpid = newFtpid;
}
/**
 * 属性m_ftppwd的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_ftppwd String
 */
public void setFtppwd(String newFtppwd) {

	m_ftppwd = newFtppwd;
}
/**
 * 属性m_ftpstyle的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_ftpstyle String
 */
public void setFtpstyle(String newFtpstyle) {

	m_ftpstyle = newFtpstyle;
}
/**
 * 属性m_isnecessary的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_isnecessary UFBoolean
 */
public void setIsnecessary(UFBoolean newIsnecessary) {

	m_isnecessary = newIsnecessary;
}
/**
 * 属性m_ts的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_ts UFDateTime
 */
public void setTs(UFDateTime newTs) {

	m_ts = newTs;
}
/**
 * 属性m_dr的setter方法。
 *
 * 创建日期：(2004-3-23)
 * @param newM_dr Integer
 */
public void setDr(Integer newDr) {

	m_dr = newDr;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2004-3-23)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_datatype == null) {
		errFields.add(new String("m_pk_datatype"));
	}
	if (m_typecode == null) {
		errFields.add(new String("m_typecode"));
	}
	if (m_typename == null) {
		errFields.add(new String("m_typename"));
	}
	if (m_exchangedatacode == null) {
		errFields.add(new String("m_exchangedatacode"));
	}
	if (m_filename == null) {
		errFields.add(new String("m_filename"));
	}
	if (m_partitionrec == null) {
		errFields.add(new String("m_partitionrec"));
	}
	if (m_partitionfield == null) {
		errFields.add(new String("m_partitionfield"));
	}
	if (m_importinterval == null) {
		errFields.add(new String("m_importinterval"));
	}
	if (m_importmode == null) {
		errFields.add(new String("m_importmode"));
	}
	if (m_flowdistance == null) {
		errFields.add(new String("m_flowdistance"));
	}
	if (m_isnecessary == null) {
		errFields.add(new String("m_isnecessary"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{ "typecode", "typename", "exchangedatacode", "filepath", "filename", "partitionrec", "partitionfield", "importinterval", "importdate", "importtime", "importmode", "flowdistance", "tablename", "ftpip", "ftpport", "ftpid", "ftppwd", "ftpstyle", "isnecessary", "ts", "dr" };
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2004-3-23)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_datatype")) {
		return m_pk_datatype;
	}
	else if (attributeName.equals("typecode")) {
		return m_typecode;
	}
	else if (attributeName.equals("typename")) {
		return m_typename;
	}
	else if (attributeName.equals("exchangedatacode")) {
		return m_exchangedatacode;
	}
	else if (attributeName.equals("filepath")) {
		return m_filepath;
	}
	else if (attributeName.equals("filename")) {
		return m_filename;
	}
	else if (attributeName.equals("partitionrec")) {
		return m_partitionrec;
	}
	else if (attributeName.equals("partitionfield")) {
		return m_partitionfield;
	}
	else if (attributeName.equals("importinterval")) {
		return m_importinterval;
	}
	else if (attributeName.equals("importdate")) {
		return m_importdate;
	}
	else if (attributeName.equals("importtime")) {
		return m_importtime;
	}
	else if (attributeName.equals("importmode")) {
		return m_importmode;
	}
	else if (attributeName.equals("flowdistance")) {
		return m_flowdistance;
	}
	else if (attributeName.equals("tablename")) {
		return m_tablename;
	}
	else if (attributeName.equals("ftpip")) {
		return m_ftpip;
	}
	else if (attributeName.equals("ftpport")) {
		return m_ftpport;
	}
	else if (attributeName.equals("ftpid")) {
		return m_ftpid;
	}
	else if (attributeName.equals("ftppwd")) {
		return m_ftppwd;
	}
	else if (attributeName.equals("ftpstyle")) {
		return m_ftpstyle;
	}
	else if (attributeName.equals("isnecessary")) {
		return m_isnecessary;
	}
	else if (attributeName.equals("ts")) {
		return m_ts;
	}
	else if (attributeName.equals("dr")) {
		return m_dr;
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2004-3-23)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_datatype")) {
			m_pk_datatype = (String) value;
		}
		else if (name.equals("typecode")) {
			m_typecode = (String) value;
		}
		else if (name.equals("typename")) {
			m_typename = (String) value;
		}
		else if (name.equals("exchangedatacode")) {
			m_exchangedatacode = (Integer) value;
		}
		else if (name.equals("filepath")) {
			m_filepath = (String) value;
		}
		else if (name.equals("filename")) {
			m_filename = (String) value;
		}
		else if (name.equals("partitionrec")) {
			m_partitionrec = (Integer) value;
		}
		else if (name.equals("partitionfield")) {
			m_partitionfield = (Integer) value;
		}
		else if (name.equals("importinterval")) {
			m_importinterval = (Integer) value;
		}
		else if (name.equals("importdate")) {
			m_importdate = (UFDate) value;
		}
		else if (name.equals("importtime")) {
			m_importtime = (String) value;
		}
		else if (name.equals("importmode")) {
			m_importmode = (Integer) value;
		}
		else if (name.equals("flowdistance")) {
			m_flowdistance = (Integer) value;
		}
		else if (name.equals("tablename")) {
			m_tablename = (String) value;
		}
		else if (name.equals("ftpip")) {
			m_ftpip = (String) value;
		}
		else if (name.equals("ftpport")) {
			m_ftpport = (Integer) value;
		}
		else if (name.equals("ftpid")) {
			m_ftpid = (String) value;
		}
		else if (name.equals("ftppwd")) {
			m_ftppwd = (String) value;
		}
		else if (name.equals("ftpstyle")) {
			m_ftpstyle = (String) value;
		}
		else if (name.equals("isnecessary")) {
			m_isnecessary = (UFBoolean) value;
		}
		else if (name.equals("ts")) {
			m_ts = (UFDateTime) value;
		}
		else if (name.equals("dr")) {
			m_dr = (Integer) value;
		}
	}
	catch (ClassCastException e) {
		throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_datatypeField() {

	if(m_pk_datatypeField == null){
		try{
			m_pk_datatypeField = new StringField();
			// 属性的名称
			m_pk_datatypeField.setName("pk_datatype");
			// 属性的描述
			m_pk_datatypeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_datatypeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getTypecodeField() {

	if(m_typecodeField == null){
		try{
			m_typecodeField = new StringField();
			// 属性的名称
			m_typecodeField.setName("typecode");
			// 属性的描述
			m_typecodeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_typecodeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getTypenameField() {

	if(m_typenameField == null){
		try{
			m_typenameField = new StringField();
			// 属性的名称
			m_typenameField.setName("typename");
			// 属性的描述
			m_typenameField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_typenameField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getExchangedatacodeField() {

	if(m_exchangedatacodeField == null){
		try{
			m_exchangedatacodeField = new IntegerField();
			// 属性的名称
			m_exchangedatacodeField.setName("exchangedatacode");
			// 属性的描述
			m_exchangedatacodeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_exchangedatacodeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFilepathField() {

	if(m_filepathField == null){
		try{
			m_filepathField = new StringField();
			// 属性的名称
			m_filepathField.setName("filepath");
			// 属性的描述
			m_filepathField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_filepathField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFilenameField() {

	if(m_filenameField == null){
		try{
			m_filenameField = new StringField();
			// 属性的名称
			m_filenameField.setName("filename");
			// 属性的描述
			m_filenameField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_filenameField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getPartitionrecField() {

	if(m_partitionrecField == null){
		try{
			m_partitionrecField = new IntegerField();
			// 属性的名称
			m_partitionrecField.setName("partitionrec");
			// 属性的描述
			m_partitionrecField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_partitionrecField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getPartitionfieldField() {

	if(m_partitionfieldField == null){
		try{
			m_partitionfieldField = new IntegerField();
			// 属性的名称
			m_partitionfieldField.setName("partitionfield");
			// 属性的描述
			m_partitionfieldField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_partitionfieldField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getImportintervalField() {

	if(m_importintervalField == null){
		try{
			m_importintervalField = new IntegerField();
			// 属性的名称
			m_importintervalField.setName("importinterval");
			// 属性的描述
			m_importintervalField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_importintervalField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateField getImportdateField() {

	if(m_importdateField == null){
		try{
			m_importdateField = new UFDateField();
			// 属性的名称
			m_importdateField.setName("importdate");
			// 属性的描述
			m_importdateField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_importdateField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getImporttimeField() {

	if(m_importtimeField == null){
		try{
			m_importtimeField = new StringField();
			// 属性的名称
			m_importtimeField.setName("importtime");
			// 属性的描述
			m_importtimeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_importtimeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getImportmodeField() {

	if(m_importmodeField == null){
		try{
			m_importmodeField = new IntegerField();
			// 属性的名称
			m_importmodeField.setName("importmode");
			// 属性的描述
			m_importmodeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_importmodeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getFlowdistanceField() {

	if(m_flowdistanceField == null){
		try{
			m_flowdistanceField = new IntegerField();
			// 属性的名称
			m_flowdistanceField.setName("flowdistance");
			// 属性的描述
			m_flowdistanceField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_flowdistanceField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getTablenameField() {

	if(m_tablenameField == null){
		try{
			m_tablenameField = new StringField();
			// 属性的名称
			m_tablenameField.setName("tablename");
			// 属性的描述
			m_tablenameField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tablenameField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFtpipField() {

	if(m_ftpipField == null){
		try{
			m_ftpipField = new StringField();
			// 属性的名称
			m_ftpipField.setName("ftpip");
			// 属性的描述
			m_ftpipField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_ftpipField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getFtpportField() {

	if(m_ftpportField == null){
		try{
			m_ftpportField = new IntegerField();
			// 属性的名称
			m_ftpportField.setName("ftpport");
			// 属性的描述
			m_ftpportField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_ftpportField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFtpidField() {

	if(m_ftpidField == null){
		try{
			m_ftpidField = new StringField();
			// 属性的名称
			m_ftpidField.setName("ftpid");
			// 属性的描述
			m_ftpidField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_ftpidField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFtppwdField() {

	if(m_ftppwdField == null){
		try{
			m_ftppwdField = new StringField();
			// 属性的名称
			m_ftppwdField.setName("ftppwd");
			// 属性的描述
			m_ftppwdField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_ftppwdField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFtpstyleField() {

	if(m_ftpstyleField == null){
		try{
			m_ftpstyleField = new StringField();
			// 属性的名称
			m_ftpstyleField.setName("ftpstyle");
			// 属性的描述
			m_ftpstyleField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_ftpstyleField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static UFBooleanField getIsnecessaryField() {

	if(m_isnecessaryField == null){
		try{
			m_isnecessaryField = new UFBooleanField();
			// 属性的名称
			m_isnecessaryField.setName("isnecessary");
			// 属性的描述
			m_isnecessaryField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_isnecessaryField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateTimeField getTsField() {

	if(m_tsField == null){
		try{
			m_tsField = new UFDateTimeField();
			// 属性的名称
			m_tsField.setName("ts");
			// 属性的描述
			m_tsField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tsField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getDrField() {

	if(m_drField == null){
		try{
			m_drField = new IntegerField();
			// 属性的名称
			m_drField.setName("dr");
			// 属性的描述
			m_drField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_drField;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2004-3-23)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_datatypeField(), getTypecodeField(), getTypenameField(), getExchangedatacodeField(), getFilepathField(), getFilenameField(), getPartitionrecField(), getPartitionfieldField(), getImportintervalField(), getImportdateField(), getImporttimeField(), getImportmodeField(), getFlowdistanceField(), getTablenameField(), getFtpipField(), getFtpportField(), getFtpidField(), getFtppwdField(), getFtpstyleField(), getIsnecessaryField(), getTsField(), getDrField()};

	return fields;
}

public String toString() {
	return getTypecode() + " " + getTypename();
}
}